name: ICP Build and Deploy

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Specify the Node.js version you need

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      # Step 3: Install DFX ICP CLI by downloading the binary directly
      - name: Install DFX
        env:
          DFX_VERSION: "0.24.0" # Specify the desired DFX version
          DFX_URL: "https://github.com/dfinity/sdk/releases/download/0.24.0/dfx-x86_64-unknown-linux-gnu.tar.gz"
        run: |
          echo "Downloading DFX version $DFX_VERSION from $DFX_URL..."
          wget $DFX_URL -O dfx.tar.gz

          echo "Creating installation directory..."
          mkdir -p $HOME/.local/share/dfx/bin

          echo "Extracting DFX binary..."
          tar -xzf dfx.tar.gz -C $HOME/.local/share/dfx/bin --strip-components=1

          echo "Verifying DFX binary exists..."
          if [ ! -f "$HOME/.local/share/dfx/bin/dfx" ]; then
            echo "DFX binary not found!"
            exit 1
          fi

          echo "Making DFX executable..."
          chmod +x $HOME/.local/share/dfx/bin/dfx

          echo "Adding DFX to PATH..."
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

          echo "Cleaning up..."
          rm dfx.tar.gz

          echo "DFX installation completed."

      # Step 4: Verify DFX installation
      - name: Verify DFX Installation
        run: dfx --version

      # Step 5: Start DFX replica in the background
      - name: Start DFX Replica
        run: dfx start --clean --background

      # Step 6: Wait for the replica to be ready
      - name: Wait for DFX Replica to Start
        run: |
          echo "Waiting for DFX Replica to start..."
          for i in {1..30}; do
            if dfx ping > /dev/null 2>&1; then
              echo "DFX Replica is up!"
              exit 0
            fi
            echo "Waiting for DFX Replica to start... ($i/30)"
            sleep 1
          done
          echo "DFX Replica failed to start."
          exit 1

      # Step 7: Deploy canisters
      - name: Deploy Canisters
        run: dfx deploy

      # Step 8: Cache NPM dependencies
      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 9: Install NPM dependencies
      - name: Install NPM Dependencies
        run: npm install

      # Step 10: Start the application
      - name: Start Application
        run: npm start &
